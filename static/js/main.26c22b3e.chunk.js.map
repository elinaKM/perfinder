{"version":3,"sources":["serviceWorker.js","components/Header.js","components/Footer.js","components/HomeBody.js","pages/Home.js","index.js"],"names":["Boolean","window","location","hostname","match","Wrapper","styled","div","NavList","ul","StyledLink","a","LogoLink","Header","href","Footer","HomeBody","Home","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gxBCfN,IA8BMC,EAAUC,IAAOC,IAAV,KAePC,EAAUF,IAAOG,GAAV,KAKPC,EAAaJ,IAAOK,EAAV,KAKVC,EAAWN,IAAOK,EAAV,KAKCE,EA5DA,kBACX,kBAACR,EAAD,KACI,kBAACO,EAAD,CAAUE,KAAK,KAAf,gBAGA,kBAACN,EAAD,KACI,4BACI,kBAACE,EAAD,CAAYI,KAAK,KAAjB,WAIJ,4BACI,kBAACJ,EAAD,CAAYI,KAAK,KAAjB,cAIJ,4BACI,kBAACJ,EAAD,CAAYI,KAAK,KAAjB,YAIJ,4BACI,kBAACJ,EAAD,CAAYI,KAAK,KAAjB,c,8vBCtBhB,IA8BMT,EAAUC,IAAOC,IAAV,KAePC,EAAUF,IAAOG,GAAV,KAKPC,EAAaJ,IAAOK,EAAV,KAKVC,EAAWN,IAAOK,EAAV,KAKCI,EA5DA,kBACX,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUD,KAAK,KAAf,gBAGA,kBAAC,EAAD,KACI,4BACI,kBAAC,EAAD,CAAYA,KAAK,KAAjB,WAIJ,4BACI,kBAAC,EAAD,CAAYA,KAAK,KAAjB,cAIJ,4BACI,kBAAC,EAAD,CAAYA,KAAK,KAAjB,YAIJ,4BACI,kBAAC,EAAD,CAAYA,KAAK,KAAjB,c,uECtBhB,IAMMT,EAAUC,IAAOC,IAAV,KAEES,EARE,kBACb,kBAAC,EAAD,0C,iLCEJ,IAQMX,EAAUC,IAAOC,IAAV,KAOEU,EAfF,kBACT,kBAAC,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCLRC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SL0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.26c22b3e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Header = () => (\n    <Wrapper>\n        <LogoLink href=\"#\">\n            Header: Logo\n        </LogoLink>\n        <NavList>\n            <li>\n                <StyledLink href=\"#\">\n                    Search\n                </StyledLink>\n            </li>\n            <li>\n                <StyledLink href=\"#\">\n                    Favorites\n                </StyledLink>\n            </li>\n            <li>\n                <StyledLink href=\"#\">\n                    Sign Up\n                </StyledLink>\n            </li>\n            <li>\n                <StyledLink href=\"#\">\n                    Log in\n                </StyledLink>\n            </li>\n        </NavList>\n    </Wrapper>\n)\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    height: 70px;\n    background-color: #ECF0F1;\n    color: #4D4751;\n    font-size: 14px;\n    font-weight: bold;\n    font-family: Arial, Helvetica, sans-serif;\n    padding: 0px 20px;\n    align-items: center;\n    margin: 0px;\n`\n\nconst NavList = styled.ul`\n    list-style: none;\n    display: flex;\n`\n\nconst StyledLink = styled.a`\n    margin-left: 30px;\n    text-decoration: none;\n    color: inherit;\n`\nconst LogoLink = styled.a`\n    text-decoration: none;\n    color: inherit;\n`\n\nexport default Header","import React from 'react'\nimport styled from 'styled-components'\n\nconst Footer = () => (\n    <Wrapper>\n        <LogoLink href=\"#\">\n            Footer: Logo\n        </LogoLink>\n        <NavList>\n            <li>\n                <StyledLink href=\"#\">\n                    Search\n                </StyledLink>\n            </li>\n            <li>\n                <StyledLink href=\"#\">\n                    Favorites\n                </StyledLink>\n            </li>\n            <li>\n                <StyledLink href=\"#\">\n                    Sign Up\n                </StyledLink>\n            </li>\n            <li>\n                <StyledLink href=\"#\">\n                    Log in\n                </StyledLink>\n            </li>\n        </NavList>\n    </Wrapper>\n)\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    height: 70px;\n    background-color: #ECF0F1;\n    color: #4D4751;\n    font-size: 14px;\n    font-weight: bold;\n    font-family: Arial, Helvetica, sans-serif;\n    padding: 0px 20px;\n    align-items: center;\n    margin: 0px;\n`\n\nconst NavList = styled.ul`\n    list-style: none;\n    display: flex;\n`\n\nconst StyledLink = styled.a`\n    margin-left: 30px;\n    text-decoration: none;\n    color: inherit;\n`\nconst LogoLink = styled.a`\n    text-decoration: none;\n    color: inherit;\n`\n\nexport default Footer","import React from 'react'\nimport styled from 'styled-components'\n\nconst HomeBody = () => (\n    <Wrapper>\n        Here will be a body very soon...\n    </Wrapper>\n)\n\nconst Wrapper = styled.div`\n`\nexport default HomeBody","import React from 'react'\nimport styled from 'styled-components'\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nimport HomeBody from '../components/HomeBody'\n\nconst Home = () => (\n    <Wrapper>\n        <Header/>\n        <HomeBody/>\n        <Footer/>\n    </Wrapper>\n)\n\nconst Wrapper = styled.div`\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n`\n\nexport default Home","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Home from \"./pages/Home\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}